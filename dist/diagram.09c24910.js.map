{"mappings":"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","sources":["src/js/script.js"],"sourcesContent":["/**\n * Hämtar antagningsdata från Mittuniversitetets API och returnerar den som JSON.\n * @returns {Promise<Object[]>} En Promise som löser sig med en array av objekt.\n */\nasync function fetchData() {\n    try {\n        const response = await fetch('https://studenter.miun.se/~mallar/dt211g/');\n        if (!response.ok) {\n            throw new Error(`HTTP-fel! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Hämtad data:\", data); // Logga data till konsolen för felsökning\n        return data;\n    } catch (error) {\n        console.error(\"Ett fel uppstod vid hämtning:\", error);\n        return [];\n    }\n}\n\n/**\n * Filtrerar ut kurser, sorterar efter antal sökande och returnerar de 6 mest populära.\n * @param {Object[]} data - Data hämtad från API:et.\n * @returns {Object[]} En array med de 6 mest sökta kurserna.\n */\nfunction getTopCourses(data) {\n    const courses = data\n        .filter(item => \n            item.type === 'Kurs') // Filtrera ut endast kurser\n            // Hade problem att sortera ut program och kurser först men hade skrivit kurs istället för Kurs, vilktigt med stor bokstav!\n        .map(course => ({\n            name: course.name,\n            applicantsTotal: course.applicantsTotal\n        }))\n        .sort((a, b) => b.applicantsTotal - a.applicantsTotal) // Sortera fallande\n        .slice(0, 6); // Ta de 6 mest sökta\n\n    console.log(\"De 6 mest sökta kurserna:\", courses); // Logga för felsökning\n    return courses;\n}\n\n/**\n * Skapar ett stapeldiagram med de mest sökta kurserna.\n * @param {Object[]} courses - En array med kursnamn och antal sökande.\n */\nfunction createBarChart(courses) {\n    const ctx = document.querySelector('.courseChart').getContext('2d');\n    const labels = courses.map(course => course.name);\n    const data = courses.map(course => course.applicantsTotal);\n\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: labels,\n            datasets: [{\n                label: 'Antal sökande',\n                data: data,\n                backgroundColor: 'white',\n                borderColor: 'white',\n                borderWidth: 1\n            }]\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                title: {\n                    display: true\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: 'Antal sökande' // Y-axel för antal sökande\n                    }\n                },\n                x: {\n                    title: {\n                        display: true,\n                        text: 'Kurser' // X-axel för kursnamn\n                    }\n                }\n            }\n        }\n    });\n}\n\n/**\n * Filtrerar ut program, sorterar efter antal sökande och returnerar de 5 mest populära.\n * @param {Object[]} data - Data hämtad från API:et.\n * @returns {Object[]} En array med de 5 mest sökta kurserna.\n */\nfunction getTopPrograms(data) {\n    const courses = data\n        .filter(item => \n            item.type === 'Program') // Filtrera ut endast program\n        .map(course => ({\n            name: course.name,\n            applicantsTotal: course.applicantsTotal\n        }))\n        .sort((a, b) => b.applicantsTotal - a.applicantsTotal) // Sortera fallande\n        .slice(0, 5); // Ta de 5 mest sökta\n\n    console.log(\"De 5 mest sökta kurserna:\", courses); // Logga för felsökning\n    return courses;\n}\n\n/**\n * Skapar ett cirkeldiagram med de mest sökta programmen.\n * @param {Object[]} programs - En array med programnamn och antal sökande.\n */\nfunction createPieChart(programs) {\n    const ctx = document.querySelector('.programChart').getContext('2d');\n\n    const labels = programs.map(program => program.name);\n    const data = programs.map(program => program.applicantsTotal);\n\n    new Chart(ctx, {\n        type: 'pie', // Cirkeldiagram\n        data: {\n            labels: labels,\n            datasets: [{\n                label: 'Antal sökande',\n                data: data,\n                backgroundColor: [\n                    'white',\n                    'lightgrey',\n                    'grey',\n                    'darkgrey',\n                    'black'\n                ],\n                borderColor: [\n                        'white',\n                        'lightgrey',\n                        'grey',\n                        'darkgrey',\n                        'black'\n                ],\n                borderWidth: 1\n            }]\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                title: {\n                    display: true\n                }\n            }\n        }\n    });\n}\n\n// Huvudfunktion som körs när sidan laddas\nasync function main() {\n    try {\n        const data = await fetchData(); // Hämta data från API\n        const topCourses = getTopCourses(data); // Filtrera de mest sökta kurserna\n        const topPrograms = getTopPrograms(data); // Filtrera de mest sökta programmen\n        createBarChart(topCourses); // Skapa diagrammet\n        createPieChart(topPrograms); // Skapa cirkeldiagram\n    } catch (error) {\n        console.error(\"Ett fel uppstod:\", error);\n    }\n}\n\n// Kör skriptet när sidan har laddats helt\nwindow.onload = main;"],"names":[],"version":3,"file":"diagram.09c24910.js.map","sourceRoot":"/__parcel_source_root/"}