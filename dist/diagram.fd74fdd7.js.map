{"mappings":"ACIA,eAAe,YACX,GAAI,CACA,IAAM,EAAW,MAAM,MAAM,6CAC7B,GAAI,CAAC,EAAS,EAAE,CACZ,MAAM,AAAI,MAAM,CAAC,kBAAkB,EAAE,EAAS,MAAM,CAAA,CAAE,EAE1D,IAAM,EAAO,MAAM,EAAS,IAAI,GAEhC,OADA,QAAQ,GAAG,CAAC,eAAgB,GACrB,CACX,CAAE,MAAO,EAAO,CAEZ,OADA,QAAQ,KAAK,CAAC,gCAAiC,GACxC,EAAE,AACb,CACJ,CAOA,SAAS,cAAc,CAAI,EACvB,IAAM,EAAU,EACX,MAAM,CAAC,AAAA,GACJ,AAAc,SAAd,EAAK,IAAI,EAEZ,GAAG,CAAC,AAAA,GAAW,CAAA,CACZ,KAAM,EAAO,IAAI,CACjB,gBAAiB,EAAO,eAAe,AAC3C,CAAA,GACC,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,eAAe,CAAG,EAAE,eAAe,EACpD,KAAK,CAAC,EAAG,GAGd,OADA,QAAQ,GAAG,CAAC,4BAA6B,GAClC,CACX,CAMA,SAAS,eAAe,CAAO,EAC3B,IAAM,EAAM,SAAS,aAAa,CAAC,gBAAgB,UAAU,CAAC,MAI9D,IAAI,MAAM,EAAK,CACX,KAAM,MACN,KAAM,CACF,OANO,EAAQ,GAAG,CAAC,AAAA,GAAU,EAAO,IAAI,EAOxC,SAAU,CAAC,CACP,MAAO,gBACP,KARC,EAAQ,GAAG,CAAC,AAAA,GAAU,EAAO,eAAe,EAS7C,gBAAiB,QACjB,YAAa,QACb,YAAa,CACjB,EAAE,AACN,EACA,QAAS,CACL,WAAY,CAAA,EACZ,QAAS,CACL,MAAO,CACH,QAAS,CAAA,CACb,CACJ,EACA,OAAQ,CACJ,EAAG,CACC,YAAa,CAAA,EACb,MAAO,CACH,QAAS,CAAA,EACT,KAAM,eACV,CACJ,EACA,EAAG,CACC,MAAO,CACH,QAAS,CAAA,EACT,KAAM,QACV,CACJ,CACJ,CACJ,CACJ,EACJ,CAOA,SAAS,eAAe,CAAI,EACxB,IAAM,EAAU,EACX,MAAM,CAAC,AAAA,GACJ,AAAc,YAAd,EAAK,IAAI,EACZ,GAAG,CAAC,AAAA,GAAW,CAAA,CACZ,KAAM,EAAO,IAAI,CACjB,gBAAiB,EAAO,eAAe,AAC3C,CAAA,GACC,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,eAAe,CAAG,EAAE,eAAe,EACpD,KAAK,CAAC,EAAG,GAGd,OADA,QAAQ,GAAG,CAAC,4BAA6B,GAClC,CACX,CAMA,SAAS,eAAe,CAAQ,EAC5B,IAAM,EAAM,SAAS,aAAa,CAAC,iBAAiB,UAAU,CAAC,MAK/D,IAAI,MAAM,EAAK,CACX,KAAM,MACN,KAAM,CACF,OANO,EAAS,GAAG,CAAC,AAAA,GAAW,EAAQ,IAAI,EAO3C,SAAU,CAAC,CACP,MAAO,gBACP,KARC,EAAS,GAAG,CAAC,AAAA,GAAW,EAAQ,eAAe,EAShD,gBAAiB,CACb,QACA,YACA,OACA,WACA,QACH,CACD,YAAa,CACL,QACA,YACA,OACA,WACA,QACP,CACD,YAAa,CACjB,EAAE,AACN,EACA,QAAS,CACL,WAAY,CAAA,EACZ,QAAS,CACL,MAAO,CACH,QAAS,CAAA,CACb,CACJ,CACJ,CACJ,EACJ,CAGA,eAAe,OACX,GAAI,CACA,IAAM,EAAO,MAAM,YACb,EAAa,cAAc,GAC3B,EAAc,eAAe,GACnC,eAAe,GACf,eAAe,EACnB,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,mBAAoB,EACtC,CACJ,CAGA,OAAO,MAAM,CAAG","sources":["<anon>","src/js/script.js"],"sourcesContent":["/**\n * Hämtar antagningsdata från Mittuniversitetets API och returnerar den som JSON.\n * @returns {Promise<Object[]>} En Promise som löser sig med en array av objekt.\n */ async function fetchData() {\n    try {\n        const response = await fetch('https://studenter.miun.se/~mallar/dt211g/');\n        if (!response.ok) throw new Error(`HTTP-fel! Status: ${response.status}`);\n        const data = await response.json();\n        console.log(\"H\\xe4mtad data:\", data); // Logga data till konsolen för felsökning\n        return data;\n    } catch (error) {\n        console.error(\"Ett fel uppstod vid h\\xe4mtning:\", error);\n        return [];\n    }\n}\n/**\n * Filtrerar ut kurser, sorterar efter antal sökande och returnerar de 6 mest populära.\n * @param {Object[]} data - Data hämtad från API:et.\n * @returns {Object[]} En array med de 6 mest sökta kurserna.\n */ function getTopCourses(data) {\n    const courses = data.filter((item)=>item.type === 'Kurs') // Filtrera ut endast kurser\n    // Hade problem att sortera ut program och kurser först men hade skrivit kurs istället för Kurs, vilktigt med stor bokstav!\n    .map((course)=>({\n            name: course.name,\n            applicantsTotal: course.applicantsTotal\n        })).sort((a, b)=>b.applicantsTotal - a.applicantsTotal) // Sortera fallande\n    .slice(0, 6); // Ta de 6 mest sökta\n    console.log(\"De 6 mest s\\xf6kta kurserna:\", courses); // Logga för felsökning\n    return courses;\n}\n/**\n * Skapar ett stapeldiagram med de mest sökta kurserna.\n * @param {Object[]} courses - En array med kursnamn och antal sökande.\n */ function createBarChart(courses) {\n    const ctx = document.querySelector('.courseChart').getContext('2d');\n    const labels = courses.map((course)=>course.name);\n    const data = courses.map((course)=>course.applicantsTotal);\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    label: \"Antal s\\xf6kande\",\n                    data: data,\n                    backgroundColor: 'white',\n                    borderColor: 'white',\n                    borderWidth: 1\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                title: {\n                    display: true\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: \"Antal s\\xf6kande\" // Y-axel för antal sökande\n                    }\n                },\n                x: {\n                    title: {\n                        display: true,\n                        text: 'Kurser' // X-axel för kursnamn\n                    }\n                }\n            }\n        }\n    });\n}\n/**\n * Filtrerar ut program, sorterar efter antal sökande och returnerar de 5 mest populära.\n * @param {Object[]} data - Data hämtad från API:et.\n * @returns {Object[]} En array med de 5 mest sökta kurserna.\n */ function getTopPrograms(data) {\n    const courses = data.filter((item)=>item.type === 'Program') // Filtrera ut endast program\n    .map((course)=>({\n            name: course.name,\n            applicantsTotal: course.applicantsTotal\n        })).sort((a, b)=>b.applicantsTotal - a.applicantsTotal) // Sortera fallande\n    .slice(0, 5); // Ta de 5 mest sökta\n    console.log(\"De 5 mest s\\xf6kta kurserna:\", courses); // Logga för felsökning\n    return courses;\n}\n/**\n * Skapar ett cirkeldiagram med de mest sökta programmen.\n * @param {Object[]} programs - En array med programnamn och antal sökande.\n */ function createPieChart(programs) {\n    const ctx = document.querySelector('.programChart').getContext('2d');\n    const labels = programs.map((program)=>program.name);\n    const data = programs.map((program)=>program.applicantsTotal);\n    new Chart(ctx, {\n        type: 'pie',\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    label: \"Antal s\\xf6kande\",\n                    data: data,\n                    backgroundColor: [\n                        'white',\n                        'lightgrey',\n                        'grey',\n                        'darkgrey',\n                        'black'\n                    ],\n                    borderColor: [\n                        'white',\n                        'lightgrey',\n                        'grey',\n                        'darkgrey',\n                        'black'\n                    ],\n                    borderWidth: 1\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                title: {\n                    display: true\n                }\n            }\n        }\n    });\n}\n// Huvudfunktion som körs när sidan laddas\nasync function main() {\n    try {\n        const data = await fetchData(); // Hämta data från API\n        const topCourses = getTopCourses(data); // Filtrera de mest sökta kurserna\n        const topPrograms = getTopPrograms(data); // Filtrera de mest sökta programmen\n        createBarChart(topCourses); // Skapa diagrammet\n        createPieChart(topPrograms); // Skapa cirkeldiagram\n    } catch (error) {\n        console.error(\"Ett fel uppstod:\", error);\n    }\n}\n// Kör skriptet när sidan har laddats helt\nwindow.onload = main;\n\n//# sourceMappingURL=diagram.fd74fdd7.js.map\n","/**\n * Hämtar antagningsdata från Mittuniversitetets API och returnerar den som JSON.\n * @returns {Promise<Object[]>} En Promise som löser sig med en array av objekt.\n */\nasync function fetchData() {\n    try {\n        const response = await fetch('https://studenter.miun.se/~mallar/dt211g/');\n        if (!response.ok) {\n            throw new Error(`HTTP-fel! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Hämtad data:\", data); // Logga data till konsolen för felsökning\n        return data;\n    } catch (error) {\n        console.error(\"Ett fel uppstod vid hämtning:\", error);\n        return [];\n    }\n}\n\n/**\n * Filtrerar ut kurser, sorterar efter antal sökande och returnerar de 6 mest populära.\n * @param {Object[]} data - Data hämtad från API:et.\n * @returns {Object[]} En array med de 6 mest sökta kurserna.\n */\nfunction getTopCourses(data) {\n    const courses = data\n        .filter(item => \n            item.type === 'Kurs') // Filtrera ut endast kurser\n            // Hade problem att sortera ut program och kurser först men hade skrivit kurs istället för Kurs, vilktigt med stor bokstav!\n        .map(course => ({\n            name: course.name,\n            applicantsTotal: course.applicantsTotal\n        }))\n        .sort((a, b) => b.applicantsTotal - a.applicantsTotal) // Sortera fallande\n        .slice(0, 6); // Ta de 6 mest sökta\n\n    console.log(\"De 6 mest sökta kurserna:\", courses); // Logga för felsökning\n    return courses;\n}\n\n/**\n * Skapar ett stapeldiagram med de mest sökta kurserna.\n * @param {Object[]} courses - En array med kursnamn och antal sökande.\n */\nfunction createBarChart(courses) {\n    const ctx = document.querySelector('.courseChart').getContext('2d');\n    const labels = courses.map(course => course.name);\n    const data = courses.map(course => course.applicantsTotal);\n\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: labels,\n            datasets: [{\n                label: 'Antal sökande',\n                data: data,\n                backgroundColor: 'white',\n                borderColor: 'white',\n                borderWidth: 1\n            }]\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                title: {\n                    display: true\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    title: {\n                        display: true,\n                        text: 'Antal sökande' // Y-axel för antal sökande\n                    }\n                },\n                x: {\n                    title: {\n                        display: true,\n                        text: 'Kurser' // X-axel för kursnamn\n                    }\n                }\n            }\n        }\n    });\n}\n\n/**\n * Filtrerar ut program, sorterar efter antal sökande och returnerar de 5 mest populära.\n * @param {Object[]} data - Data hämtad från API:et.\n * @returns {Object[]} En array med de 5 mest sökta kurserna.\n */\nfunction getTopPrograms(data) {\n    const courses = data\n        .filter(item => \n            item.type === 'Program') // Filtrera ut endast program\n        .map(course => ({\n            name: course.name,\n            applicantsTotal: course.applicantsTotal\n        }))\n        .sort((a, b) => b.applicantsTotal - a.applicantsTotal) // Sortera fallande\n        .slice(0, 5); // Ta de 5 mest sökta\n\n    console.log(\"De 5 mest sökta kurserna:\", courses); // Logga för felsökning\n    return courses;\n}\n\n/**\n * Skapar ett cirkeldiagram med de mest sökta programmen.\n * @param {Object[]} programs - En array med programnamn och antal sökande.\n */\nfunction createPieChart(programs) {\n    const ctx = document.querySelector('.programChart').getContext('2d');\n\n    const labels = programs.map(program => program.name);\n    const data = programs.map(program => program.applicantsTotal);\n\n    new Chart(ctx, {\n        type: 'pie', // Cirkeldiagram\n        data: {\n            labels: labels,\n            datasets: [{\n                label: 'Antal sökande',\n                data: data,\n                backgroundColor: [\n                    'white',\n                    'lightgrey',\n                    'grey',\n                    'darkgrey',\n                    'black'\n                ],\n                borderColor: [\n                        'white',\n                        'lightgrey',\n                        'grey',\n                        'darkgrey',\n                        'black'\n                ],\n                borderWidth: 1\n            }]\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                title: {\n                    display: true\n                }\n            }\n        }\n    });\n}\n\n// Huvudfunktion som körs när sidan laddas\nasync function main() {\n    try {\n        const data = await fetchData(); // Hämta data från API\n        const topCourses = getTopCourses(data); // Filtrera de mest sökta kurserna\n        const topPrograms = getTopPrograms(data); // Filtrera de mest sökta programmen\n        createBarChart(topCourses); // Skapa diagrammet\n        createPieChart(topPrograms); // Skapa cirkeldiagram\n    } catch (error) {\n        console.error(\"Ett fel uppstod:\", error);\n    }\n}\n\n// Kör skriptet när sidan har laddats helt\nwindow.onload = main;"],"names":["fetchData","response","fetch","ok","Error","status","data","json","console","log","error","getTopCourses","courses","filter","item","type","map","course","name","applicantsTotal","sort","a","b","slice","createBarChart","ctx","document","querySelector","getContext","Chart","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","plugins","title","display","scales","y","beginAtZero","text","x","getTopPrograms","createPieChart","programs","program","main","topCourses","topPrograms","window","onload"],"version":3,"file":"diagram.fd74fdd7.js.map"}