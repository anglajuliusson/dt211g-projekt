{"mappings":"AAAA;;;;;CAKC,GACD,SAAS;IACL,OAAO,IAAI,QAAS,CAAC,SAAS;QAC9B,qDAAqD;QACrD,IAAI,iBAAiB,WACjB,mEAAmE;QACnE,UAAU,WAAW,CAAC,kBAAkB,CACpC,CAAC;YACG,gDAAgD;YAChD,MAAM,WAAW,SAAS,MAAM,CAAC,QAAQ;YACzC,MAAM,YAAY,SAAS,MAAM,CAAC,SAAS;YAC3C,QAAS;gBAAC,KAAK;gBAAU,KAAK;YAAS;YAEvC,6BAA6B;YAC7B,QAAQ,GAAG,CAAC,eAAe;YAC3B,QAAQ,GAAG,CAAC,gBAAgB;QAChC,GACA,CAAC;YACG,sDAAsD;YACtD,QAAQ,KAAK,CAAC,sCAAmC,MAAM,OAAO;YAC9D,OAAO;QACX,GACA;YACI,oBAAoB;YACpB,SAAS;YACT,YAAY,EAAE,qBAAqB;QACvC;aAED;YACH,+CAA+C;YAC/C,QAAQ,GAAG,CAAC;YACZ,OAAO,IAAI,MAAM;QACrB;IACJ;AACA;AAEA;;;;;;;;;;;CAWC,GACD,eAAe;IACX,IAAI;QACA,kDAAkD;QAClD,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM;QAE3B,wEAAwE;QACxE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,OAAO,IAAI,CAAC,aAAa,CAAC;QAChD,MAAM,EAAE,qBAAqB,EAAE,GAAG,MAAM,OAAO,IAAI,CAAC,aAAa,CAAC;QAElE,uEAAuE;QACvE,MAAM,WAAW;YAAE;YAAK;QAAI;QAE5B,sEAAsE;QACtE,MAAM,IAAI,IAAI,SAAS,aAAa,CAAC,cAAc;YAC/C,MAAM;YACN,QAAQ;YACR,OAAO;QACX;QAEA,2CAA2C;QAC3C,SAAS,IAAI,sBAAsB;YAC/B,KAAK;YACL,UAAU;YACV,OAAO;QACX;IACJ,EAAE,OAAO,OAAO;QACZ,6EAA6E;QAC7E,QAAQ,KAAK,CAAC,4CAA4C;IAC9D;AACJ;AACA,2EAA2E;AAC3E;AAEA;;;;;;CAMC,GACD,eAAe,eAAe,KAAK;IAC/B,IAAI;QACA,MAAM,MAAM,CAAC,6CAA6C,EAAE,mBAAmB,OAAO,6BAA6B,CAAC;QACpH,MAAM,WAAW,MAAM,MAAM;QAC7B,MAAM,UAAU,MAAM,SAAS,IAAI;QAEnC,IAAI,QAAQ,MAAM,GAAG,GAAG;YACpB,2CAA2C;YAC3C,MAAM,QAAQ,QAAQ,IAAI,CAAC,CAAA,IAAK;oBAAC;oBAAQ;oBAAQ;iBAAU,CAAC,QAAQ,CAAC,EAAE,IAAI,MAAM,OAAO,CAAC,EAAE;YAE3F,mBAAmB;YACnB,MAAM,MAAM,MAAM,GAAG;YACrB,MAAM,MAAM,MAAM,GAAG;YAErB,MAAM,WAAW;gBAAE,KAAK,WAAW;gBAAM,KAAK,WAAW;YAAK;YAE9D,IAAI,SAAS,CAAC;YACd,IAAI,OAAO,CAAC;QAChB,OACI,MAAM;IAEd,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAAwB;QACtC,MAAM;IACV;AACJ;AAEA,SAAS,aAAa,CAAC,kBAAkB,gBAAgB,CAAC,SAAS;IAC/D,MAAM,QAAQ,SAAS,aAAa,CAAC,kBAAkB,KAAK,CAAC,IAAI;IACjE,IAAI,OACA,eAAe;AAEvB","sources":["src/js/map.js"],"sourcesContent":["/**\n * Hämtar användarens nuvarande geografiska position (latitude och longitude) om geolokalisering stöds av webbläsaren.\n * Om det uppstår ett fel vid hämtning av positionen, loggas ett felmeddelande.\n * \n * @returns {Promise<{lat: number, lng: number}>} // Hämta användarens position som en Promise.\n */\nfunction getUserLocation() {\n    return new Promise ((resolve, reject) => {\n    // Kontrollera om webbläsaren stödjer geolokalisering\n    if (\"geolocation\" in navigator) {\n        // Om geolokalisering är tillgänglig, hämta den aktuella positionen\n        navigator.geolocation.getCurrentPosition(\n            (position) => {\n                // Hämtar latitude och longitude från positionen\n                const latitude = position.coords.latitude;\n                const longitude = position.coords.longitude;\n                resolve ({lat: latitude, lng: longitude})\n\n                // Logga latitud och longitud\n                console.log(\"Latitude: \" + latitude);\n                console.log(\"Longitude: \" + longitude);\n            },\n            (error) => {\n                // Om det uppstår ett fel vid inhämtning av positionen\n                console.error(\"Fel vid inhämtning av position:\", error.message);\n                reject(error);\n            },\n            {\n                enableHighAccuracy: true, // Försök att få en mer exakt position\n                timeout: 5000, // Maximal tid för att hämta positionen (5 sekunder)\n                maximumAge: 0 // Ingen cachelagring\n            }\n        );\n    } else {\n        // Om geolokalisering inte stöds av webbläsaren\n        console.log(\"Geolokalisering stöds inte av din webbläsare\");\n        reject(new Error(\"Geolokaliseringen stöds inte\"))\n    }\n});\n}\n\n/**\n * Initierar Google Maps-kartan och markerar användarens aktuella position på kartan.\n * Hämtar användarens geografiska position (latitude och longitude) och använder dessa för att\n * centrera kartan och placera en markör vid användarens position.\n * \n * Om det inte går att hämta användarens position eller om det sker ett annat fel vid\n * inladdning av kartan, loggas ett felmeddelande i konsolen.\n *\n * @async\n * @function\n * @returns {Promise<void>} \n */\nasync function initMap() {\n    try {\n        // Hämta användarens position från geolokalisering\n        const { lat, lng } = await getUserLocation(); \n\n        // Vänta på att Google Maps biblioteket och markörbiblioteket ska laddas\n        const { Map } = await google.maps.importLibrary(\"maps\");\n        const { AdvancedMarkerElement } = await google.maps.importLibrary(\"marker\");\n\n        // Definiera positionen med hjälp av användarens latitude och longitude\n        const position = { lat, lng };\n\n        // Skapa en ny Google Map instans och centrera på användarens position\n        map = new Map(document.querySelector(\".mapFrame\"), {\n            zoom: 13, // Zoomnivå på kartan\n            center: position, // Centrerar kartan på användarens position\n            mapId: \"eee69d787741fca3\", // Google Maps karta-id\n        });\n\n        // Skapa en markör vid användarens position\n        marker = new AdvancedMarkerElement({\n            map: map,\n            position: position,\n            title: \"Din position\", // Titel på markören\n        });\n    } catch (error) {\n        // Logga ett fel om något går fel vid inladdningen av kartan eller positionen\n        console.error(\"Kunde inte initiera kartan pga platsfel:\", error);\n    }\n}\n// Anropa funktionen för att hämta och logga användarens nuvarande position\ninitMap();\n\n/**\n * Söker en plats via Nominatim och uppdaterar kartan.\n * \n * @async\n * @function searchLocation\n * @param {string} query - Plats eller adress som ska sökas\n */\nasync function searchLocation(query) {\n    try {\n        const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&addressdetails=1`;\n        const response = await fetch(url);\n        const results = await response.json();\n\n        if (results.length > 0) {\n            // // Försök hitta stad, ort eller by först\n            const place = results.find(r => [\"city\", \"town\", \"village\"].includes(r.type)) || results[0];\n\n            // Hämta lat & lon \n            const lat = place.lat;\n            const lon = place.lon;\n\n            const position = { lat: parseFloat(lat), lng: parseFloat(lon) };\n\n            map.setCenter(position);\n            map.setZoom(14);\n        } else {\n            alert(\"Ingen plats hittades.\");\n        }\n    } catch (error) {\n        console.error(\"Fel vid platsökning:\", error);\n        alert(\"Ett fel uppstod vid sökningen.\");\n    }\n}\n\ndocument.querySelector(\".search_button\").addEventListener(\"click\", () => {\n    const query = document.querySelector(\".locationInput\").value.trim();\n    if (query) {\n        searchLocation(query);\n    }\n});"],"names":[],"version":3,"file":"karta.237be95d.js.map","sourceRoot":"/__parcel_source_root/"}